//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebApplication.webServiceReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertHistoricOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDoctorOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertPacientOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDoctorPacientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllPacientRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPacientInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDoctorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDoctorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginPacientOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDoctorOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePacientOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateClinicalRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDoctorOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePacientOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteClinicalRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteClinicalRecordsWithPacientIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::WebApplication.Properties.Settings.Default.WebApplication_webServiceReference_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event insertHistoricCompletedEventHandler insertHistoricCompleted;
        
        /// <remarks/>
        public event InsertDoctorCompletedEventHandler InsertDoctorCompleted;
        
        /// <remarks/>
        public event insertPacientCompletedEventHandler insertPacientCompleted;
        
        /// <remarks/>
        public event getAllDoctorPacientsCompletedEventHandler getAllDoctorPacientsCompleted;
        
        /// <remarks/>
        public event getAllPacientRecordsCompletedEventHandler getAllPacientRecordsCompleted;
        
        /// <remarks/>
        public event getPacientInfoCompletedEventHandler getPacientInfoCompleted;
        
        /// <remarks/>
        public event getDoctorInfoCompletedEventHandler getDoctorInfoCompleted;
        
        /// <remarks/>
        public event getAllDoctorsCompletedEventHandler getAllDoctorsCompleted;
        
        /// <remarks/>
        public event loginPacientCompletedEventHandler loginPacientCompleted;
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event updateDoctorCompletedEventHandler updateDoctorCompleted;
        
        /// <remarks/>
        public event updatePacientCompletedEventHandler updatePacientCompleted;
        
        /// <remarks/>
        public event updateClinicalRecordsCompletedEventHandler updateClinicalRecordsCompleted;
        
        /// <remarks/>
        public event deleteDoctorCompletedEventHandler deleteDoctorCompleted;
        
        /// <remarks/>
        public event deletePacientCompletedEventHandler deletePacientCompleted;
        
        /// <remarks/>
        public event deleteClinicalRecordCompletedEventHandler deleteClinicalRecordCompleted;
        
        /// <remarks/>
        public event deleteClinicalRecordsWithPacientIdCompletedEventHandler deleteClinicalRecordsWithPacientIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertHistoric", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertHistoric(int doctorId, int pacientId, string diagnose, string treatment, string date) {
            this.Invoke("insertHistoric", new object[] {
                        doctorId,
                        pacientId,
                        diagnose,
                        treatment,
                        date});
        }
        
        /// <remarks/>
        public void insertHistoricAsync(int doctorId, int pacientId, string diagnose, string treatment, string date) {
            this.insertHistoricAsync(doctorId, pacientId, diagnose, treatment, date, null);
        }
        
        /// <remarks/>
        public void insertHistoricAsync(int doctorId, int pacientId, string diagnose, string treatment, string date, object userState) {
            if ((this.insertHistoricOperationCompleted == null)) {
                this.insertHistoricOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertHistoricOperationCompleted);
            }
            this.InvokeAsync("insertHistoric", new object[] {
                        doctorId,
                        pacientId,
                        diagnose,
                        treatment,
                        date}, this.insertHistoricOperationCompleted, userState);
        }
        
        private void OninsertHistoricOperationCompleted(object arg) {
            if ((this.insertHistoricCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertHistoricCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDoctor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDoctor(string dni, string name, string password) {
            this.Invoke("InsertDoctor", new object[] {
                        dni,
                        name,
                        password});
        }
        
        /// <remarks/>
        public void InsertDoctorAsync(string dni, string name, string password) {
            this.InsertDoctorAsync(dni, name, password, null);
        }
        
        /// <remarks/>
        public void InsertDoctorAsync(string dni, string name, string password, object userState) {
            if ((this.InsertDoctorOperationCompleted == null)) {
                this.InsertDoctorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDoctorOperationCompleted);
            }
            this.InvokeAsync("InsertDoctor", new object[] {
                        dni,
                        name,
                        password}, this.InsertDoctorOperationCompleted, userState);
        }
        
        private void OnInsertDoctorOperationCompleted(object arg) {
            if ((this.InsertDoctorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDoctorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertPacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int insertPacient(string doctorId, string dni, string name, string password) {
            object[] results = this.Invoke("insertPacient", new object[] {
                        doctorId,
                        dni,
                        name,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void insertPacientAsync(string doctorId, string dni, string name, string password) {
            this.insertPacientAsync(doctorId, dni, name, password, null);
        }
        
        /// <remarks/>
        public void insertPacientAsync(string doctorId, string dni, string name, string password, object userState) {
            if ((this.insertPacientOperationCompleted == null)) {
                this.insertPacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertPacientOperationCompleted);
            }
            this.InvokeAsync("insertPacient", new object[] {
                        doctorId,
                        dni,
                        name,
                        password}, this.insertPacientOperationCompleted, userState);
        }
        
        private void OninsertPacientOperationCompleted(object arg) {
            if ((this.insertPacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertPacientCompleted(this, new insertPacientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDoctorPacients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Pacient[] getAllDoctorPacients(int doctorId) {
            object[] results = this.Invoke("getAllDoctorPacients", new object[] {
                        doctorId});
            return ((Pacient[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllDoctorPacientsAsync(int doctorId) {
            this.getAllDoctorPacientsAsync(doctorId, null);
        }
        
        /// <remarks/>
        public void getAllDoctorPacientsAsync(int doctorId, object userState) {
            if ((this.getAllDoctorPacientsOperationCompleted == null)) {
                this.getAllDoctorPacientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDoctorPacientsOperationCompleted);
            }
            this.InvokeAsync("getAllDoctorPacients", new object[] {
                        doctorId}, this.getAllDoctorPacientsOperationCompleted, userState);
        }
        
        private void OngetAllDoctorPacientsOperationCompleted(object arg) {
            if ((this.getAllDoctorPacientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDoctorPacientsCompleted(this, new getAllDoctorPacientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllPacientRecords", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Historic[] getAllPacientRecords(int pacientId) {
            object[] results = this.Invoke("getAllPacientRecords", new object[] {
                        pacientId});
            return ((Historic[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllPacientRecordsAsync(int pacientId) {
            this.getAllPacientRecordsAsync(pacientId, null);
        }
        
        /// <remarks/>
        public void getAllPacientRecordsAsync(int pacientId, object userState) {
            if ((this.getAllPacientRecordsOperationCompleted == null)) {
                this.getAllPacientRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllPacientRecordsOperationCompleted);
            }
            this.InvokeAsync("getAllPacientRecords", new object[] {
                        pacientId}, this.getAllPacientRecordsOperationCompleted, userState);
        }
        
        private void OngetAllPacientRecordsOperationCompleted(object arg) {
            if ((this.getAllPacientRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllPacientRecordsCompleted(this, new getAllPacientRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPacientInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Pacient getPacientInfo(int pacientId) {
            object[] results = this.Invoke("getPacientInfo", new object[] {
                        pacientId});
            return ((Pacient)(results[0]));
        }
        
        /// <remarks/>
        public void getPacientInfoAsync(int pacientId) {
            this.getPacientInfoAsync(pacientId, null);
        }
        
        /// <remarks/>
        public void getPacientInfoAsync(int pacientId, object userState) {
            if ((this.getPacientInfoOperationCompleted == null)) {
                this.getPacientInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPacientInfoOperationCompleted);
            }
            this.InvokeAsync("getPacientInfo", new object[] {
                        pacientId}, this.getPacientInfoOperationCompleted, userState);
        }
        
        private void OngetPacientInfoOperationCompleted(object arg) {
            if ((this.getPacientInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPacientInfoCompleted(this, new getPacientInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDoctorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Doctor getDoctorInfo(int doctorId) {
            object[] results = this.Invoke("getDoctorInfo", new object[] {
                        doctorId});
            return ((Doctor)(results[0]));
        }
        
        /// <remarks/>
        public void getDoctorInfoAsync(int doctorId) {
            this.getDoctorInfoAsync(doctorId, null);
        }
        
        /// <remarks/>
        public void getDoctorInfoAsync(int doctorId, object userState) {
            if ((this.getDoctorInfoOperationCompleted == null)) {
                this.getDoctorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDoctorInfoOperationCompleted);
            }
            this.InvokeAsync("getDoctorInfo", new object[] {
                        doctorId}, this.getDoctorInfoOperationCompleted, userState);
        }
        
        private void OngetDoctorInfoOperationCompleted(object arg) {
            if ((this.getDoctorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDoctorInfoCompleted(this, new getDoctorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDoctors", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Doctor[] getAllDoctors() {
            object[] results = this.Invoke("getAllDoctors", new object[0]);
            return ((Doctor[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllDoctorsAsync() {
            this.getAllDoctorsAsync(null);
        }
        
        /// <remarks/>
        public void getAllDoctorsAsync(object userState) {
            if ((this.getAllDoctorsOperationCompleted == null)) {
                this.getAllDoctorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDoctorsOperationCompleted);
            }
            this.InvokeAsync("getAllDoctors", new object[0], this.getAllDoctorsOperationCompleted, userState);
        }
        
        private void OngetAllDoctorsOperationCompleted(object arg) {
            if ((this.getAllDoctorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDoctorsCompleted(this, new getAllDoctorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/loginPacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string loginPacient(string dni, string password) {
            object[] results = this.Invoke("loginPacient", new object[] {
                        dni,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginPacientAsync(string dni, string password) {
            this.loginPacientAsync(dni, password, null);
        }
        
        /// <remarks/>
        public void loginPacientAsync(string dni, string password, object userState) {
            if ((this.loginPacientOperationCompleted == null)) {
                this.loginPacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginPacientOperationCompleted);
            }
            this.InvokeAsync("loginPacient", new object[] {
                        dni,
                        password}, this.loginPacientOperationCompleted, userState);
        }
        
        private void OnloginPacientOperationCompleted(object arg) {
            if ((this.loginPacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginPacientCompleted(this, new loginPacientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Userdata login(string dni, string password) {
            object[] results = this.Invoke("login", new object[] {
                        dni,
                        password});
            return ((Userdata)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string dni, string password) {
            this.loginAsync(dni, password, null);
        }
        
        /// <remarks/>
        public void loginAsync(string dni, string password, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        dni,
                        password}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateDoctor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateDoctor(string doctorId, string dni, string name, string password) {
            this.Invoke("updateDoctor", new object[] {
                        doctorId,
                        dni,
                        name,
                        password});
        }
        
        /// <remarks/>
        public void updateDoctorAsync(string doctorId, string dni, string name, string password) {
            this.updateDoctorAsync(doctorId, dni, name, password, null);
        }
        
        /// <remarks/>
        public void updateDoctorAsync(string doctorId, string dni, string name, string password, object userState) {
            if ((this.updateDoctorOperationCompleted == null)) {
                this.updateDoctorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDoctorOperationCompleted);
            }
            this.InvokeAsync("updateDoctor", new object[] {
                        doctorId,
                        dni,
                        name,
                        password}, this.updateDoctorOperationCompleted, userState);
        }
        
        private void OnupdateDoctorOperationCompleted(object arg) {
            if ((this.updateDoctorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDoctorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updatePacient(string pacientId, string dni, string name) {
            this.Invoke("updatePacient", new object[] {
                        pacientId,
                        dni,
                        name});
        }
        
        /// <remarks/>
        public void updatePacientAsync(string pacientId, string dni, string name) {
            this.updatePacientAsync(pacientId, dni, name, null);
        }
        
        /// <remarks/>
        public void updatePacientAsync(string pacientId, string dni, string name, object userState) {
            if ((this.updatePacientOperationCompleted == null)) {
                this.updatePacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePacientOperationCompleted);
            }
            this.InvokeAsync("updatePacient", new object[] {
                        pacientId,
                        dni,
                        name}, this.updatePacientOperationCompleted, userState);
        }
        
        private void OnupdatePacientOperationCompleted(object arg) {
            if ((this.updatePacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePacientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateClinicalRecords", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateClinicalRecords(string id, string diagnose, string treatment, string date) {
            this.Invoke("updateClinicalRecords", new object[] {
                        id,
                        diagnose,
                        treatment,
                        date});
        }
        
        /// <remarks/>
        public void updateClinicalRecordsAsync(string id, string diagnose, string treatment, string date) {
            this.updateClinicalRecordsAsync(id, diagnose, treatment, date, null);
        }
        
        /// <remarks/>
        public void updateClinicalRecordsAsync(string id, string diagnose, string treatment, string date, object userState) {
            if ((this.updateClinicalRecordsOperationCompleted == null)) {
                this.updateClinicalRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateClinicalRecordsOperationCompleted);
            }
            this.InvokeAsync("updateClinicalRecords", new object[] {
                        id,
                        diagnose,
                        treatment,
                        date}, this.updateClinicalRecordsOperationCompleted, userState);
        }
        
        private void OnupdateClinicalRecordsOperationCompleted(object arg) {
            if ((this.updateClinicalRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateClinicalRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteDoctor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteDoctor(string doctorId) {
            this.Invoke("deleteDoctor", new object[] {
                        doctorId});
        }
        
        /// <remarks/>
        public void deleteDoctorAsync(string doctorId) {
            this.deleteDoctorAsync(doctorId, null);
        }
        
        /// <remarks/>
        public void deleteDoctorAsync(string doctorId, object userState) {
            if ((this.deleteDoctorOperationCompleted == null)) {
                this.deleteDoctorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDoctorOperationCompleted);
            }
            this.InvokeAsync("deleteDoctor", new object[] {
                        doctorId}, this.deleteDoctorOperationCompleted, userState);
        }
        
        private void OndeleteDoctorOperationCompleted(object arg) {
            if ((this.deleteDoctorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDoctorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deletePacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deletePacient(string pacientId) {
            this.Invoke("deletePacient", new object[] {
                        pacientId});
        }
        
        /// <remarks/>
        public void deletePacientAsync(string pacientId) {
            this.deletePacientAsync(pacientId, null);
        }
        
        /// <remarks/>
        public void deletePacientAsync(string pacientId, object userState) {
            if ((this.deletePacientOperationCompleted == null)) {
                this.deletePacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePacientOperationCompleted);
            }
            this.InvokeAsync("deletePacient", new object[] {
                        pacientId}, this.deletePacientOperationCompleted, userState);
        }
        
        private void OndeletePacientOperationCompleted(object arg) {
            if ((this.deletePacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePacientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteClinicalRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteClinicalRecord(string recordId) {
            this.Invoke("deleteClinicalRecord", new object[] {
                        recordId});
        }
        
        /// <remarks/>
        public void deleteClinicalRecordAsync(string recordId) {
            this.deleteClinicalRecordAsync(recordId, null);
        }
        
        /// <remarks/>
        public void deleteClinicalRecordAsync(string recordId, object userState) {
            if ((this.deleteClinicalRecordOperationCompleted == null)) {
                this.deleteClinicalRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteClinicalRecordOperationCompleted);
            }
            this.InvokeAsync("deleteClinicalRecord", new object[] {
                        recordId}, this.deleteClinicalRecordOperationCompleted, userState);
        }
        
        private void OndeleteClinicalRecordOperationCompleted(object arg) {
            if ((this.deleteClinicalRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteClinicalRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteClinicalRecordsWithPacientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteClinicalRecordsWithPacientId(string pacientId) {
            this.Invoke("deleteClinicalRecordsWithPacientId", new object[] {
                        pacientId});
        }
        
        /// <remarks/>
        public void deleteClinicalRecordsWithPacientIdAsync(string pacientId) {
            this.deleteClinicalRecordsWithPacientIdAsync(pacientId, null);
        }
        
        /// <remarks/>
        public void deleteClinicalRecordsWithPacientIdAsync(string pacientId, object userState) {
            if ((this.deleteClinicalRecordsWithPacientIdOperationCompleted == null)) {
                this.deleteClinicalRecordsWithPacientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteClinicalRecordsWithPacientIdOperationCompleted);
            }
            this.InvokeAsync("deleteClinicalRecordsWithPacientId", new object[] {
                        pacientId}, this.deleteClinicalRecordsWithPacientIdOperationCompleted, userState);
        }
        
        private void OndeleteClinicalRecordsWithPacientIdOperationCompleted(object arg) {
            if ((this.deleteClinicalRecordsWithPacientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteClinicalRecordsWithPacientIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Pacient {
        
        private int idField;
        
        private string dniField;
        
        private string nameField;
        
        private string passwordField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string dni {
            get {
                return this.dniField;
            }
            set {
                this.dniField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Userdata {
        
        private int idField;
        
        private string loguedAsField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string loguedAs {
            get {
                return this.loguedAsField;
            }
            set {
                this.loguedAsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Doctor {
        
        private int idField;
        
        private string dniField;
        
        private string nameField;
        
        private string passwordField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string dni {
            get {
                return this.dniField;
            }
            set {
                this.dniField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Historic {
        
        private int idField;
        
        private int doctorIdField;
        
        private int pacientIdField;
        
        private string diagnoseField;
        
        private string treatmentField;
        
        private string dateField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int DoctorId {
            get {
                return this.doctorIdField;
            }
            set {
                this.doctorIdField = value;
            }
        }
        
        /// <remarks/>
        public int PacientId {
            get {
                return this.pacientIdField;
            }
            set {
                this.pacientIdField = value;
            }
        }
        
        /// <remarks/>
        public string diagnose {
            get {
                return this.diagnoseField;
            }
            set {
                this.diagnoseField = value;
            }
        }
        
        /// <remarks/>
        public string treatment {
            get {
                return this.treatmentField;
            }
            set {
                this.treatmentField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertHistoricCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertDoctorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertPacientCompletedEventHandler(object sender, insertPacientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertPacientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertPacientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllDoctorPacientsCompletedEventHandler(object sender, getAllDoctorPacientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDoctorPacientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDoctorPacientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Pacient[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Pacient[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllPacientRecordsCompletedEventHandler(object sender, getAllPacientRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllPacientRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllPacientRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Historic[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Historic[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getPacientInfoCompletedEventHandler(object sender, getPacientInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPacientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPacientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Pacient Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Pacient)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getDoctorInfoCompletedEventHandler(object sender, getDoctorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDoctorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDoctorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Doctor Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Doctor)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllDoctorsCompletedEventHandler(object sender, getAllDoctorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDoctorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDoctorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Doctor[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Doctor[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void loginPacientCompletedEventHandler(object sender, loginPacientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginPacientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginPacientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Userdata Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Userdata)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateDoctorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updatePacientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateClinicalRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteDoctorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deletePacientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteClinicalRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteClinicalRecordsWithPacientIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591