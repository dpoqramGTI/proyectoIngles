//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebApplication.webServiceReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertClinicalStoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDoctorOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDoctorPacientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginPacientOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertPacientOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::WebApplication.Properties.Settings.Default.WebApplication_webServiceReference_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event insertClinicalStoryCompletedEventHandler insertClinicalStoryCompleted;
        
        /// <remarks/>
        public event InsertDoctorCompletedEventHandler InsertDoctorCompleted;
        
        /// <remarks/>
        public event getAllDoctorPacientsCompletedEventHandler getAllDoctorPacientsCompleted;
        
        /// <remarks/>
        public event loginPacientCompletedEventHandler loginPacientCompleted;
        
        /// <remarks/>
        public event insertPacientCompletedEventHandler insertPacientCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertClinicalStory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertClinicalStory(int doctorId, int pacientId, string diagnose, string treatment) {
            this.Invoke("insertClinicalStory", new object[] {
                        doctorId,
                        pacientId,
                        diagnose,
                        treatment});
        }
        
        /// <remarks/>
        public void insertClinicalStoryAsync(int doctorId, int pacientId, string diagnose, string treatment) {
            this.insertClinicalStoryAsync(doctorId, pacientId, diagnose, treatment, null);
        }
        
        /// <remarks/>
        public void insertClinicalStoryAsync(int doctorId, int pacientId, string diagnose, string treatment, object userState) {
            if ((this.insertClinicalStoryOperationCompleted == null)) {
                this.insertClinicalStoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertClinicalStoryOperationCompleted);
            }
            this.InvokeAsync("insertClinicalStory", new object[] {
                        doctorId,
                        pacientId,
                        diagnose,
                        treatment}, this.insertClinicalStoryOperationCompleted, userState);
        }
        
        private void OninsertClinicalStoryOperationCompleted(object arg) {
            if ((this.insertClinicalStoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertClinicalStoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDoctor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDoctor(string name) {
            this.Invoke("InsertDoctor", new object[] {
                        name});
        }
        
        /// <remarks/>
        public void InsertDoctorAsync(string name) {
            this.InsertDoctorAsync(name, null);
        }
        
        /// <remarks/>
        public void InsertDoctorAsync(string name, object userState) {
            if ((this.InsertDoctorOperationCompleted == null)) {
                this.InsertDoctorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDoctorOperationCompleted);
            }
            this.InvokeAsync("InsertDoctor", new object[] {
                        name}, this.InsertDoctorOperationCompleted, userState);
        }
        
        private void OnInsertDoctorOperationCompleted(object arg) {
            if ((this.InsertDoctorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDoctorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDoctorPacients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Pacient[] getAllDoctorPacients(int doctorId) {
            object[] results = this.Invoke("getAllDoctorPacients", new object[] {
                        doctorId});
            return ((Pacient[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllDoctorPacientsAsync(int doctorId) {
            this.getAllDoctorPacientsAsync(doctorId, null);
        }
        
        /// <remarks/>
        public void getAllDoctorPacientsAsync(int doctorId, object userState) {
            if ((this.getAllDoctorPacientsOperationCompleted == null)) {
                this.getAllDoctorPacientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDoctorPacientsOperationCompleted);
            }
            this.InvokeAsync("getAllDoctorPacients", new object[] {
                        doctorId}, this.getAllDoctorPacientsOperationCompleted, userState);
        }
        
        private void OngetAllDoctorPacientsOperationCompleted(object arg) {
            if ((this.getAllDoctorPacientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDoctorPacientsCompleted(this, new getAllDoctorPacientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/loginPacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string loginPacient(string dni, string password) {
            object[] results = this.Invoke("loginPacient", new object[] {
                        dni,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginPacientAsync(string dni, string password) {
            this.loginPacientAsync(dni, password, null);
        }
        
        /// <remarks/>
        public void loginPacientAsync(string dni, string password, object userState) {
            if ((this.loginPacientOperationCompleted == null)) {
                this.loginPacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginPacientOperationCompleted);
            }
            this.InvokeAsync("loginPacient", new object[] {
                        dni,
                        password}, this.loginPacientOperationCompleted, userState);
        }
        
        private void OnloginPacientOperationCompleted(object arg) {
            if ((this.loginPacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginPacientCompleted(this, new loginPacientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertPacient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertPacient(string dni, string name, string password) {
            this.Invoke("insertPacient", new object[] {
                        dni,
                        name,
                        password});
        }
        
        /// <remarks/>
        public void insertPacientAsync(string dni, string name, string password) {
            this.insertPacientAsync(dni, name, password, null);
        }
        
        /// <remarks/>
        public void insertPacientAsync(string dni, string name, string password, object userState) {
            if ((this.insertPacientOperationCompleted == null)) {
                this.insertPacientOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertPacientOperationCompleted);
            }
            this.InvokeAsync("insertPacient", new object[] {
                        dni,
                        name,
                        password}, this.insertPacientOperationCompleted, userState);
        }
        
        private void OninsertPacientOperationCompleted(object arg) {
            if ((this.insertPacientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertPacientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Pacient {
        
        private string diagnoseField;
        
        private string treatmentField;
        
        private string dateField;
        
        /// <remarks/>
        public string diagnose {
            get {
                return this.diagnoseField;
            }
            set {
                this.diagnoseField = value;
            }
        }
        
        /// <remarks/>
        public string treatment {
            get {
                return this.treatmentField;
            }
            set {
                this.treatmentField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertClinicalStoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertDoctorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllDoctorPacientsCompletedEventHandler(object sender, getAllDoctorPacientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDoctorPacientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDoctorPacientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Pacient[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Pacient[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void loginPacientCompletedEventHandler(object sender, loginPacientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginPacientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginPacientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertPacientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591